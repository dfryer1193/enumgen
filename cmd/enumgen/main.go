package main

import (
	"flag"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

var enumType = flag.String("type", "", "Name of the enum type to generate a validator for")

type EnumConst struct {
	Name  string
	Value string
}

func main() {
	flag.Parse()
	if *enumType == "" {
		log.Fatal("Missing required --type argument")
	}

	dir, err := os.Getwd()
	if err != nil {
		log.Fatal(err)
	}

	files, err := filepath.Glob("*.go")
	if err != nil {
		log.Fatal(err)
	}

	fs := token.NewFileSet()
	var pkgName string
	var enumConsts []EnumConst

	for _, file := range files {
		node, err := parser.ParseFile(fs, file, nil, parser.AllErrors)
		if err != nil {
			log.Fatalf("Failed to parse %s: %v", file, err)
		}
		if pkgName == "" {
			pkgName = node.Name.Name
		}

		for _, decl := range node.Decls {
			genDecl, ok := decl.(*ast.GenDecl)
			if !ok || genDecl.Tok != token.CONST {
				continue
			}
			for _, spec := range genDecl.Specs {
				valSpec, ok := spec.(*ast.ValueSpec)
				if !ok {
					continue
				}

				var typeName string
				if valSpec.Type != nil {
					if ident, ok := valSpec.Type.(*ast.Ident); ok {
						typeName = ident.Name
					}
				}
				if typeName != *enumType {
					continue
				}

				for i, name := range valSpec.Names {
					if len(valSpec.Values) <= i {
						continue
					}
					basicLit, ok := valSpec.Values[i].(*ast.BasicLit)
					if !ok || basicLit.Kind.String() != "STRING" {
						continue
					}
					val := strings.Trim(basicLit.Value, `"`)
					enumConsts = append(enumConsts, EnumConst{
						Name:  name.Name,
						Value: val,
					})
				}
			}
		}
	}

	if len(enumConsts) == 0 {
		log.Fatalf("No constants of type %s found", *enumType)
	}

	outputFile := fmt.Sprintf("%s_enumvalidator_gen.go", strings.ToLower(*enumType))
	out, err := os.Create(outputFile)
	if err != nil {
		log.Fatal(err)
	}
	defer out.Close()

	err = validatorTemplate.Execute(out, map[string]interface{}{
		"Package":   pkgName,
		"Type":      *enumType,
		"TypeLower": strings.ToLower(*enumType),
		"ConstList": enumConsts,
	})
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("Generated: %s\n", outputFile)
}

var validatorTemplate = template.Must(template.New("validator").Parse(`// Code generated by enumgen; DO NOT EDIT.

package {{ .Package }}

import "fmt"

var {{ .TypeLower }}Values = map[string]{{ .Type }}{
{{- range .ConstList }}
	"{{ .Value }}": {{ .Name }},
{{- end }}
}

func Validate{{ .Type }}(value string) ({{ .Type }}, error) {
	v, ok := {{ .TypeLower }}Values[value]
	if !ok {
		return "", fmt.Errorf("invalid {{ .Type }}: %q", value)
	}
	return v, nil
}
`))
